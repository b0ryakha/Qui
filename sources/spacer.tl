require("cachedcolor")
require("widget")
require("oop")

global enum SpacerType
    "Horizontal" "Vertical"
end

global record Spacer
    is_debug: boolean
    align_type: SpacerType
    debug_color: Color
    thickness: number

-- Widget decl:
    pos: Vector2
    size: Vector2
    size_policy: SizePolicy
    isVisible: function<Self>(Self): boolean
end

-- Spacer(parent: WidgetHeir, align_type: SpacerType)
-- Spacer(align_type: SpacerType)
function Spacer:new(parent: WidgetHeir, align_type: SpacerType): Spacer
    if type(parent) == "string" and not align_type then
        align_type = parent as SpacerType
        parent = nil
    end

    local self = extends(Spacer, Widget, parent, nil, "Maximum")

    self.is_debug = false
    self.debug_color = CachedColor:new(20, 20, 20)
    self.align_type = align_type
    self.thickness = 10

    if self.align_type == "Horizontal" then
        self.size.y = self.thickness
    else
        self.size.x = self.thickness
    end

    return self
end

function Spacer:setSize(size: Vector2)
    if not size then
        warning("Spacer: Cannot set a nil size")
        return
    end

    self.size_policy = "Fixed"
    self:setSize(size:copy())
end

function Spacer:turnDebug(is_debug: boolean)
    self.is_debug = is_debug == nil and true or is_debug
end

-- override
function Spacer:render()
    if not self:isVisible() then return end
    if not self.is_debug then return end
    
    if self.align_type == "Horizontal" then
        for x = self.pos.x, self.pos.x + self.size.x, self.thickness do
            local x1 = x as integer
            local y1 = (self.size.y / 2 + self.pos.y) as integer
            local x2 = (x + self.thickness) as integer
            local y2 = (self.size.y / 2 + self.pos.y + self.thickness) as integer
            render.line(x1, y1, x2, y2, 5, self.debug_color)
        end
    else
        error("not impl")
    end
end